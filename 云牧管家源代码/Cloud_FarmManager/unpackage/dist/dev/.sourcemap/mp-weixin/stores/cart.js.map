{"version":3,"file":"cart.js","sources":["stores/cart.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\n\n// 购物车状态管理 - 使用Pinia组合式API\nexport const useCartStore = defineStore('cart', () => {\n  // 状态定义\n  const cartItems = ref([])\n  const currentUserId = ref(null)\n\n  // 获取当前用户ID\n  const getCurrentUserId = () => {\n    try {\n      const userInfo = uni.getStorageSync('userInfo')\n      return userInfo && userInfo.userId ? userInfo.userId : 'guest'\n    } catch (error) {\n      console.error('获取用户ID失败:', error)\n      return 'guest'\n    }\n  }\n\n  // 获取用户专属的存储key\n  const getUserCartKey = (userId = null) => {\n    const uid = userId || getCurrentUserId()\n    return `cart_items_${uid}`\n  }\n\n  // 从本地存储加载购物车数据\n  const loadCartFromStorage = () => {\n    try {\n      const newUserId = getCurrentUserId()\n      \n      // 如果用户发生变化，清空当前购物车数据\n      if (currentUserId.value && currentUserId.value !== newUserId) {\n        cartItems.value = []\n      }\n      \n      currentUserId.value = newUserId\n      const cartKey = getUserCartKey(newUserId)\n      const cartData = uni.getStorageSync(cartKey)\n      \n      if (cartData) {\n        cartItems.value = JSON.parse(cartData)\n       \n      } else {\n        cartItems.value = []\n      }\n    } catch (error) {\n      console.error('加载购物车数据失败:', error)\n      cartItems.value = []\n    }\n  }\n\n  // 保存购物车数据到本地存储\n  const saveCartToStorage = () => {\n    try {\n      const userId = getCurrentUserId()\n      const cartKey = getUserCartKey(userId)\n      uni.setStorageSync(cartKey, JSON.stringify(cartItems.value))\n    } catch (error) {\n      console.error('保存购物车数据失败:', error)\n    }\n  }\n\n  // 切换用户时调用此方法\n  const switchUser = () => {\n    const newUserId = getCurrentUserId()\n    if (currentUserId.value !== newUserId) {\n      currentUserId.value = newUserId\n      loadCartFromStorage()\n      notifyCartUpdate()\n    }\n  }\n\n  // 清除指定用户的购物车数据\n  const clearUserCart = (userId = null) => {\n    try {\n      const uid = userId || getCurrentUserId()\n      const cartKey = getUserCartKey(uid)\n      uni.removeStorageSync(cartKey)\n      \n      // 如果清除的是当前用户的数据，也清空内存中的数据\n      if (uid === currentUserId.value) {\n        cartItems.value = []\n        notifyCartUpdate()\n      }\n    } catch (error) {\n      console.error('清除用户购物车数据失败:', error)\n    }\n  }\n\n  // 通知购物车更新（用于页面间通信）\n  const notifyCartUpdate = () => {\n    // 发送自定义事件通知购物车更新\n    uni.$emit('cartUpdated', {\n      totalCount: totalCount.value,\n      selectedCount: selectedCount.value,\n      totalPrice: selectedTotalPrice.value,\n      items: cartItems.value,\n      userId: currentUserId.value\n    })\n  }\n\n  // 添加商品到购物车\n  const addToCart = (product, quantity = 1, specs = '默认规格') => {\n    // 确保使用当前用户的数据\n    switchUser()\n    \n    const existingItemIndex = cartItems.value.findIndex(item => \n      item.id === product.id && item.specs === specs\n    )\n\n    if (existingItemIndex !== -1) {\n      // 如果商品已存在，增加数量\n      cartItems.value[existingItemIndex].quantity += quantity\n    } else {\n      // 如果商品不存在，添加新商品\n      const cartItem = {\n        id: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.image,\n        specs: specs,\n        quantity: quantity,\n        selected: true\n      }\n      cartItems.value.push(cartItem)\n    }\n\n    saveCartToStorage()\n    notifyCartUpdate()\n    \n    return true\n  }\n\n  // 更新商品数量\n  const updateQuantity = (index, quantity) => {\n    switchUser()\n    \n    if (index >= 0 && index < cartItems.value.length) {\n      if (quantity <= 0) {\n        removeItem(index)\n      } else {\n        cartItems.value[index].quantity = quantity\n        saveCartToStorage()\n        notifyCartUpdate()\n      }\n    }\n  }\n\n  // 切换商品选中状态\n  const toggleItemSelect = (index) => {\n    switchUser()\n    \n    if (index >= 0 && index < cartItems.value.length) {\n      cartItems.value[index].selected = !cartItems.value[index].selected\n      saveCartToStorage()\n      notifyCartUpdate()\n    }\n  }\n\n  // 移除商品\n  const removeItem = (index) => {\n    switchUser()\n    \n    if (index >= 0 && index < cartItems.value.length) {\n      cartItems.value.splice(index, 1)\n      saveCartToStorage()\n      notifyCartUpdate()\n    }\n  }\n\n  // 清空购物车\n  const clearCart = () => {\n    switchUser()\n    \n    cartItems.value = []\n    saveCartToStorage()\n    notifyCartUpdate()\n  }\n\n  // 全选/取消全选\n  const toggleSelectAll = () => {\n    switchUser()\n    \n    const allSelected = cartItems.value.every(item => item.selected)\n    cartItems.value.forEach(item => {\n      item.selected = !allSelected\n    })\n    saveCartToStorage()\n    notifyCartUpdate()\n  }\n\n  // 根据商品ID查找商品\n  const findItemById = (productId) => {\n    switchUser()\n    return cartItems.value.find(item => item.id === productId)\n  }\n\n  // 获取商品在购物车中的数量\n  const getItemQuantity = (productId) => {\n    switchUser()\n    const item = findItemById(productId)\n    return item ? item.quantity : 0\n  }\n\n  // 获取当前用户信息（用于调试）\n  const getCurrentUserInfo = () => {\n    return {\n      userId: currentUserId.value,\n      cartKey: getUserCartKey(),\n      itemCount: cartItems.value.length\n    }\n  }\n\n  // 计算属性\n  const totalCount = computed(() => {\n    return cartItems.value.reduce((total, item) => total + item.quantity, 0)\n  })\n\n  const selectedCount = computed(() => {\n    return cartItems.value\n      .filter(item => item.selected)\n      .reduce((total, item) => total + item.quantity, 0)\n  })\n\n  const selectedTotalPrice = computed(() => {\n    return cartItems.value\n      .filter(item => item.selected)\n      .reduce((total, item) => total + item.price * item.quantity, 0)\n  })\n\n  const selectedItems = computed(() => {\n    return cartItems.value.filter(item => item.selected)\n  })\n\n  const isAllSelected = computed(() => {\n    return cartItems.value.length > 0 && cartItems.value.every(item => item.selected)\n  })\n \n  // 初始化时加载数据\n  loadCartFromStorage()\n\n  // 返回状态和方法\n  return {\n    // 状态\n    cartItems,\n    currentUserId,\n    \n    // 计算属性\n    totalCount,\n    selectedCount,\n    selectedTotalPrice,\n    selectedItems,\n    isAllSelected,\n    \n    // 方法\n    switchUser,\n    clearUserCart,\n    addToCart,\n    updateQuantity,\n    toggleItemSelect,\n    removeItem,\n    clearCart,\n    toggleSelectAll,\n    findItemById,\n    getItemQuantity,\n    getCurrentUserInfo,\n    loadCartFromStorage,\n    saveCartToStorage\n  }\n})"],"names":["defineStore","ref","uni","computed"],"mappings":"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"}