{"version":3,"file":"addressService.js","sources":["api/addressService.js"],"sourcesContent":["// 地址管理服务\r\n// 提供用户地址的增删改查功能\r\n\r\n/**\r\n * 获取当前用户ID\r\n * @returns {String|null} 用户ID\r\n */\r\nfunction getCurrentUserId() {\r\n\ttry {\r\n\t\tconst userInfo = uni.getStorageSync('userInfo');\r\n\t\treturn userInfo && userInfo.userId ? userInfo.userId : null;\r\n\t} catch (error) {\r\n\t\tconsole.error('获取用户ID失败:', error);\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * 获取用户地址列表\r\n * @returns {Promise<Array>} 地址列表\r\n */\r\nexport async function getAddressList() {\r\n\ttry {\r\n\t\tconst userId = getCurrentUserId();\r\n\t\t\r\n\t\tif (!userId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 401,\r\n\t\t\t\tmessage: '请先登录',\r\n\t\t\t\tdata: []\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tconst result = await uniCloud.callFunction({\r\n\t\t\tname: 'address-manager',\r\n\t\t\tdata: {\r\n\t\t\t\taction: 'getAddressList',\r\n\t\t\t\tdata: { userId }\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn result.result;\r\n\t} catch (error) {\r\n\t\tconsole.error('获取地址列表失败:', error);\r\n\t\treturn {\r\n\t\t\tcode: 500,\r\n\t\t\tmessage: '获取地址列表失败',\r\n\t\t\tdata: []\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * 添加新地址\r\n * @param {Object} address 地址信息\r\n * @returns {Promise<Object>} 操作结果\r\n */\r\nexport async function addAddress(address) {\r\n\ttry {\r\n\t\tconst userId = getCurrentUserId();\r\n\t\t\r\n\t\tif (!userId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 401,\r\n\t\t\t\tmessage: '请先登录'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\t// 验证地址信息\r\n\t\tif (!address.name || !address.phone || !address.detail) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 400,\r\n\t\t\t\tmessage: '请填写完整的地址信息'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tconst result = await uniCloud.callFunction({\r\n\t\t\tname: 'address-manager',\r\n\t\t\tdata: {\r\n\t\t\t\taction: 'addAddress',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tuserId,\r\n\t\t\t\t\taddress\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn result.result;\r\n\t} catch (error) {\r\n\t\tconsole.error('添加地址失败:', error);\r\n\t\treturn {\r\n\t\t\tcode: 500,\r\n\t\t\tmessage: '添加地址失败'\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * 更新地址\r\n * @param {String} addressId 地址ID\r\n * @param {Object} address 地址信息\r\n * @returns {Promise<Object>} 操作结果\r\n */\r\nexport async function updateAddress(addressId, address) {\r\n\ttry {\r\n\t\tconst userId = getCurrentUserId();\r\n\t\t\r\n\t\tif (!userId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 401,\r\n\t\t\t\tmessage: '请先登录'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif (!addressId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 400,\r\n\t\t\t\tmessage: '地址ID不能为空'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tconst result = await uniCloud.callFunction({\r\n\t\t\tname: 'address-manager',\r\n\t\t\tdata: {\r\n\t\t\t\taction: 'updateAddress',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tuserId,\r\n\t\t\t\t\taddressId,\r\n\t\t\t\t\taddress\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn result.result;\r\n\t} catch (error) {\r\n\t\tconsole.error('更新地址失败:', error);\r\n\t\treturn {\r\n\t\t\tcode: 500,\r\n\t\t\tmessage: '更新地址失败'\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * 删除地址\r\n * @param {String} addressId 地址ID\r\n * @returns {Promise<Object>} 操作结果\r\n */\r\nexport async function deleteAddress(addressId) {\r\n\ttry {\r\n\t\tconst userId = getCurrentUserId();\r\n\t\t\r\n\t\tif (!userId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 401,\r\n\t\t\t\tmessage: '请先登录'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif (!addressId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 400,\r\n\t\t\t\tmessage: '地址ID不能为空'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tconst result = await uniCloud.callFunction({\r\n\t\t\tname: 'address-manager',\r\n\t\t\tdata: {\r\n\t\t\t\taction: 'deleteAddress',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tuserId,\r\n\t\t\t\t\taddressId\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn result.result;\r\n\t} catch (error) {\r\n\t\tconsole.error('删除地址失败:', error);\r\n\t\treturn {\r\n\t\t\tcode: 500,\r\n\t\t\tmessage: '删除地址失败'\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * 设置默认地址\r\n * @param {String} addressId 地址ID\r\n * @returns {Promise<Object>} 操作结果\r\n */\r\nexport async function setDefaultAddress(addressId) {\r\n\ttry {\r\n\t\tconst userId = getCurrentUserId();\r\n\t\t\r\n\t\tif (!userId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 401,\r\n\t\t\t\tmessage: '请先登录'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif (!addressId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 400,\r\n\t\t\t\tmessage: '地址ID不能为空'\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tconst result = await uniCloud.callFunction({\r\n\t\t\tname: 'address-manager',\r\n\t\t\tdata: {\r\n\t\t\t\taction: 'setDefaultAddress',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tuserId,\r\n\t\t\t\t\taddressId\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn result.result;\r\n\t} catch (error) {\r\n\t\tconsole.error('设置默认地址失败:', error);\r\n\t\treturn {\r\n\t\t\tcode: 500,\r\n\t\t\tmessage: '设置默认地址失败'\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * 获取默认地址\r\n * @returns {Promise<Object>} 默认地址信息\r\n */\r\nexport async function getDefaultAddress() {\r\n\ttry {\r\n\t\tconst userId = getCurrentUserId();\r\n\t\t\r\n\t\tif (!userId) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: 401,\r\n\t\t\t\tmessage: '请先登录',\r\n\t\t\t\tdata: null\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tconst result = await uniCloud.callFunction({\r\n\t\t\tname: 'address-manager',\r\n\t\t\tdata: {\r\n\t\t\t\taction: 'getDefaultAddress',\r\n\t\t\t\tdata: { userId }\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn result.result;\r\n\t} catch (error) {\r\n\t\tconsole.error('获取默认地址失败:', error);\r\n\t\treturn {\r\n\t\t\tcode: 500,\r\n\t\t\tmessage: '获取默认地址失败',\r\n\t\t\tdata: null\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * 地址表单验证\r\n * @param {Object} address 地址信息\r\n * @returns {Object} 验证结果\r\n */\r\nexport function validateAddress(address) {\r\n\tconst errors = [];\r\n\t\r\n\tif (!address.name || address.name.trim() === '') {\r\n\t\terrors.push('请输入收货人姓名');\r\n\t}\r\n\t\r\n\tif (!address.phone || address.phone.trim() === '') {\r\n\t\terrors.push('请输入手机号码');\r\n\t} else if (!/^1[3-9]\\d{9}$/.test(address.phone)) {\r\n\t\terrors.push('请输入正确的手机号码');\r\n\t}\r\n\t\r\n\tif (!address.detail || address.detail.trim() === '') {\r\n\t\terrors.push('请输入详细地址');\r\n\t}\r\n\t\r\n\treturn {\r\n\t\tisValid: errors.length === 0,\r\n\t\terrors: errors\r\n\t};\r\n}\r\n\r\n/**\r\n * 格式化地址显示\r\n * @param {Object} address 地址信息\r\n * @returns {String} 格式化后的地址\r\n */\r\nexport function formatAddress(address) {\r\n\tif (!address) return '';\r\n\t\r\n\tconst parts = [];\r\n\t\r\n\tif (address.province) parts.push(address.province);\r\n\tif (address.city && address.city !== address.province) parts.push(address.city);\r\n\tif (address.district && address.district !== address.city) parts.push(address.district);\r\n\tif (address.detail) parts.push(address.detail);\r\n\t\r\n\treturn parts.join(' ');\r\n}\r\n\r\n/**\r\n * 地址选择器数据 (中国省市区数据，这里简化为几个主要城市)\r\n * 实际项目中建议使用完整的省市区数据或调用地址选择API\r\n */\r\nexport const addressPickerData = [\r\n\t{\r\n\t\tname: '北京市',\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tname: '北京市',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{ name: '东城区' },\r\n\t\t\t\t\t{ name: '西城区' },\r\n\t\t\t\t\t{ name: '朝阳区' },\r\n\t\t\t\t\t{ name: '丰台区' },\r\n\t\t\t\t\t{ name: '海淀区' }\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: '上海市',\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tname: '上海市',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{ name: '黄浦区' },\r\n\t\t\t\t\t{ name: '徐汇区' },\r\n\t\t\t\t\t{ name: '长宁区' },\r\n\t\t\t\t\t{ name: '静安区' },\r\n\t\t\t\t\t{ name: '浦东新区' }\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: '广东省',\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tname: '广州市',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{ name: '越秀区' },\r\n\t\t\t\t\t{ name: '荔湾区' },\r\n\t\t\t\t\t{ name: '海珠区' },\r\n\t\t\t\t\t{ name: '天河区' },\r\n\t\t\t\t\t{ name: '白云区' }\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '深圳市',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{ name: '福田区' },\r\n\t\t\t\t\t{ name: '罗湖区' },\r\n\t\t\t\t\t{ name: '南山区' },\r\n\t\t\t\t\t{ name: '宝安区' },\r\n\t\t\t\t\t{ name: '龙岗区' }\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: '湖南省',\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\tname: '长沙市',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{ name: '岳麓区' },\r\n\t\t\t\t\t{ name: '芙蓉区' },\r\n\t\t\t\t\t{ name: '天心区' },\r\n\t\t\t\t\t{ name: '开福区' },\r\n\t\t\t\t\t{ name: '雨花区' }\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '湘西土家族苗族自治州',\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\t{ name: '吉首市' },\r\n\t\t\t\t\t{ name: '泸溪县' },\r\n\t\t\t\t\t{ name: '凤凰县' },\r\n\t\t\t\t\t{ name: '花垣县' },\r\n\t\t\t\t\t{ name: '保靖县' }\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]; "],"names":["uni","uniCloud"],"mappings":";;AAOA,SAAS,mBAAmB;AAC3B,MAAI;AACH,UAAM,WAAWA,cAAAA,MAAI,eAAe,UAAU;AAC9C,WAAO,YAAY,SAAS,SAAS,SAAS,SAAS;AAAA,EACvD,SAAQ,OAAO;AACfA,sEAAc,aAAa,KAAK;AAChC,WAAO;AAAA,EACP;AACF;AAMO,eAAe,iBAAiB;AACtC,MAAI;AACH,UAAM,SAAS;AAEf,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM,CAAE;AAAA,MACZ;AAAA,IACG;AAED,UAAM,SAAS,MAAMC,cAAQ,GAAC,aAAa;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,EAAE,OAAQ;AAAA,MAChB;AAAA,IACJ,CAAG;AAED,WAAO,OAAO;AAAA,EACd,SAAQ,OAAO;AACfD,sEAAc,aAAa,KAAK;AAChC,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM,CAAE;AAAA,IACX;AAAA,EACE;AACF;AAOO,eAAe,WAAW,SAAS;AACzC,MAAI;AACH,UAAM,SAAS;AAEf,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAGD,QAAI,CAAC,QAAQ,QAAQ,CAAC,QAAQ,SAAS,CAAC,QAAQ,QAAQ;AACvD,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,UAAM,SAAS,MAAMC,cAAQ,GAAC,aAAa;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,UACL;AAAA,UACA;AAAA,QACA;AAAA,MACD;AAAA,IACJ,CAAG;AAED,WAAO,OAAO;AAAA,EACd,SAAQ,OAAO;AACfD,sEAAc,WAAW,KAAK;AAC9B,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACZ;AAAA,EACE;AACF;AAQO,eAAe,cAAc,WAAW,SAAS;AACvD,MAAI;AACH,UAAM,SAAS;AAEf,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,QAAI,CAAC,WAAW;AACf,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,UAAM,SAAS,MAAMC,cAAQ,GAAC,aAAa;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,QACA;AAAA,MACD;AAAA,IACJ,CAAG;AAED,WAAO,OAAO;AAAA,EACd,SAAQ,OAAO;AACfD,uEAAc,WAAW,KAAK;AAC9B,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACZ;AAAA,EACE;AACF;AAOO,eAAe,cAAc,WAAW;AAC9C,MAAI;AACH,UAAM,SAAS;AAEf,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,QAAI,CAAC,WAAW;AACf,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,UAAM,SAAS,MAAMC,cAAQ,GAAC,aAAa;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,UACL;AAAA,UACA;AAAA,QACA;AAAA,MACD;AAAA,IACJ,CAAG;AAED,WAAO,OAAO;AAAA,EACd,SAAQ,OAAO;AACfD,uEAAc,WAAW,KAAK;AAC9B,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACZ;AAAA,EACE;AACF;AAOO,eAAe,kBAAkB,WAAW;AAClD,MAAI;AACH,UAAM,SAAS;AAEf,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,QAAI,CAAC,WAAW;AACf,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,MACb;AAAA,IACG;AAED,UAAM,SAAS,MAAMC,cAAQ,GAAC,aAAa;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,UACL;AAAA,UACA;AAAA,QACA;AAAA,MACD;AAAA,IACJ,CAAG;AAED,WAAO,OAAO;AAAA,EACd,SAAQ,OAAO;AACfD,uEAAc,aAAa,KAAK;AAChC,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,IACZ;AAAA,EACE;AACF;AAMO,eAAe,oBAAoB;AACzC,MAAI;AACH,UAAM,SAAS;AAEf,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,IACG;AAED,UAAM,SAAS,MAAMC,cAAQ,GAAC,aAAa;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,EAAE,OAAQ;AAAA,MAChB;AAAA,IACJ,CAAG;AAED,WAAO,OAAO;AAAA,EACd,SAAQ,OAAO;AACfD,uEAAc,aAAa,KAAK;AAChC,WAAO;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA,IACT;AAAA,EACE;AACF;AAOO,SAAS,gBAAgB,SAAS;AACxC,QAAM,SAAS,CAAA;AAEf,MAAI,CAAC,QAAQ,QAAQ,QAAQ,KAAK,KAAM,MAAK,IAAI;AAChD,WAAO,KAAK,UAAU;AAAA,EACtB;AAED,MAAI,CAAC,QAAQ,SAAS,QAAQ,MAAM,KAAM,MAAK,IAAI;AAClD,WAAO,KAAK,SAAS;AAAA,EACrB,WAAU,CAAC,gBAAgB,KAAK,QAAQ,KAAK,GAAG;AAChD,WAAO,KAAK,YAAY;AAAA,EACxB;AAED,MAAI,CAAC,QAAQ,UAAU,QAAQ,OAAO,KAAM,MAAK,IAAI;AACpD,WAAO,KAAK,SAAS;AAAA,EACrB;AAED,SAAO;AAAA,IACN,SAAS,OAAO,WAAW;AAAA,IAC3B;AAAA,EACF;AACA;;;;;;;;"}